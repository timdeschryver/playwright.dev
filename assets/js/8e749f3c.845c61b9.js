"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[8434],{53264:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"1.23","label":"1.23","banner":null,"badge":true,"className":"docs-version-1.23","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting started","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Inspector","href":"/docs/inspector","docId":"inspector"},{"type":"link","label":"Trace Viewer","href":"/docs/trace-viewer","docId":"trace-viewer"},{"type":"link","label":"Test Generator","href":"/docs/codegen","docId":"codegen"},{"type":"link","label":"Debugging tools","href":"/docs/debug","docId":"debug"},{"type":"link","label":"Release notes","href":"/docs/release-notes","docId":"release-notes"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Playwright Test","items":[{"type":"link","label":"Annotations","href":"/docs/test-annotations","docId":"test-annotations"},{"type":"link","label":"API testing","href":"/docs/test-api-testing","docId":"test-api-testing"},{"type":"link","label":"Assertions","href":"/docs/test-assertions","docId":"test-assertions"},{"type":"link","label":"Authentication","href":"/docs/test-auth","docId":"test-auth"},{"type":"link","label":"Command line","href":"/docs/test-cli","docId":"test-cli"},{"type":"link","label":"Configuration","href":"/docs/test-configuration","docId":"test-configuration"},{"type":"link","label":"Page Object Model","href":"/docs/test-pom","docId":"test-pom"},{"type":"link","label":"Parallelism and sharding","href":"/docs/test-parallel","docId":"test-parallel"},{"type":"link","label":"Parametrize tests","href":"/docs/test-parameterize","docId":"test-parameterize"},{"type":"link","label":"Reporters","href":"/docs/test-reporters","docId":"test-reporters"},{"type":"link","label":"Test retry","href":"/docs/test-retries","docId":"test-retries"},{"type":"link","label":"Timeouts","href":"/docs/test-timeouts","docId":"test-timeouts"},{"type":"link","label":"Visual comparisons","href":"/docs/test-snapshots","docId":"test-snapshots"},{"type":"link","label":"Advanced: configuration","href":"/docs/test-advanced","docId":"test-advanced"},{"type":"link","label":"Advanced: fixtures","href":"/docs/test-fixtures","docId":"test-fixtures"},{"type":"link","label":"TypeScript","href":"/docs/test-typescript","docId":"test-typescript"},{"type":"link","label":"Experimental: components","href":"/docs/test-components","docId":"test-components"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Library","href":"/docs/library","docId":"library"},{"type":"link","label":"Auto-waiting","href":"/docs/actionability","docId":"actionability"},{"type":"link","label":"Authentication","href":"/docs/auth","docId":"auth"},{"type":"link","label":"Browsers","href":"/docs/browsers","docId":"browsers"},{"type":"link","label":"Browser Contexts","href":"/docs/browser-contexts","docId":"browser-contexts"},{"type":"link","label":"Chrome Extensions","href":"/docs/chrome-extensions","docId":"chrome-extensions"},{"type":"link","label":"Command line tools","href":"/docs/cli","docId":"cli"},{"type":"link","label":"Dialogs","href":"/docs/dialogs","docId":"dialogs"},{"type":"link","label":"Downloads","href":"/docs/downloads","docId":"downloads"},{"type":"link","label":"Emulation","href":"/docs/emulation","docId":"emulation"},{"type":"link","label":"Evaluating JavaScript","href":"/docs/evaluating","docId":"evaluating"},{"type":"link","label":"Events","href":"/docs/events","docId":"events"},{"type":"link","label":"Extensibility","href":"/docs/extensibility","docId":"extensibility"},{"type":"link","label":"Frames","href":"/docs/frames","docId":"frames"},{"type":"link","label":"Handles","href":"/docs/handles","docId":"handles"},{"type":"link","label":"Input","href":"/docs/input","docId":"input"},{"type":"link","label":"Locators","href":"/docs/locators","docId":"locators"},{"type":"link","label":"Navigations","href":"/docs/navigations","docId":"navigations"},{"type":"link","label":"Network","href":"/docs/network","docId":"network"},{"type":"link","label":"Pages","href":"/docs/pages","docId":"pages"},{"type":"link","label":"Page Object Models","href":"/docs/pom","docId":"pom"},{"type":"link","label":"Screenshots","href":"/docs/screenshots","docId":"screenshots"},{"type":"link","label":"Selectors","href":"/docs/selectors","docId":"selectors"},{"type":"link","label":"Videos","href":"/docs/videos","docId":"videos"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Migration","items":[{"type":"link","label":"Migrating from Protractor","href":"/docs/protractor","docId":"protractor"},{"type":"link","label":"Migrating from Testing Library","href":"/docs/testing-library","docId":"testing-library"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Docker","href":"/docs/docker","docId":"docker"},{"type":"link","label":"Continuous Integration","href":"/docs/ci","docId":"ci"},{"type":"link","label":"Third party runners","href":"/docs/test-runners","docId":"test-runners"},{"type":"link","label":"Selenium Grid","href":"/docs/selenium-grid","docId":"selenium-grid"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Supported languages","href":"/docs/languages","docId":"languages"}],"api":[{"type":"category","label":"API reference","items":[{"type":"link","label":"Playwright Test","href":"/docs/api/class-test","docId":"api/class-test"},{"type":"link","label":"Playwright Library","href":"/docs/api/class-playwright","docId":"api/class-playwright"},{"type":"category","label":"Classes","items":[{"type":"link","label":"APIRequest","href":"/docs/api/class-apirequest","docId":"api/class-apirequest"},{"type":"link","label":"APIRequestContext","href":"/docs/api/class-apirequestcontext","docId":"api/class-apirequestcontext"},{"type":"link","label":"APIResponse","href":"/docs/api/class-apiresponse","docId":"api/class-apiresponse"},{"type":"link","label":"Browser","href":"/docs/api/class-browser","docId":"api/class-browser"},{"type":"link","label":"BrowserContext","href":"/docs/api/class-browsercontext","docId":"api/class-browsercontext"},{"type":"link","label":"BrowserServer","href":"/docs/api/class-browserserver","docId":"api/class-browserserver"},{"type":"link","label":"BrowserType","href":"/docs/api/class-browsertype","docId":"api/class-browsertype"},{"type":"link","label":"CDPSession","href":"/docs/api/class-cdpsession","docId":"api/class-cdpsession"},{"type":"link","label":"ConsoleMessage","href":"/docs/api/class-consolemessage","docId":"api/class-consolemessage"},{"type":"link","label":"Coverage","href":"/docs/api/class-coverage","docId":"api/class-coverage"},{"type":"link","label":"Dialog","href":"/docs/api/class-dialog","docId":"api/class-dialog"},{"type":"link","label":"Download","href":"/docs/api/class-download","docId":"api/class-download"},{"type":"link","label":"ElementHandle","href":"/docs/api/class-elementhandle","docId":"api/class-elementhandle"},{"type":"link","label":"FileChooser","href":"/docs/api/class-filechooser","docId":"api/class-filechooser"},{"type":"link","label":"Frame","href":"/docs/api/class-frame","docId":"api/class-frame"},{"type":"link","label":"FrameLocator","href":"/docs/api/class-framelocator","docId":"api/class-framelocator"},{"type":"link","label":"JSHandle","href":"/docs/api/class-jshandle","docId":"api/class-jshandle"},{"type":"link","label":"Keyboard","href":"/docs/api/class-keyboard","docId":"api/class-keyboard"},{"type":"link","label":"Locator","href":"/docs/api/class-locator","docId":"api/class-locator"},{"type":"link","label":"Logger","href":"/docs/api/class-logger","docId":"api/class-logger"},{"type":"link","label":"Mouse","href":"/docs/api/class-mouse","docId":"api/class-mouse"},{"type":"link","label":"Page","href":"/docs/api/class-page","docId":"api/class-page"},{"type":"link","label":"Request","href":"/docs/api/class-request","docId":"api/class-request"},{"type":"link","label":"Response","href":"/docs/api/class-response","docId":"api/class-response"},{"type":"link","label":"Route","href":"/docs/api/class-route","docId":"api/class-route"},{"type":"link","label":"Selectors","href":"/docs/api/class-selectors","docId":"api/class-selectors"},{"type":"link","label":"Touchscreen","href":"/docs/api/class-touchscreen","docId":"api/class-touchscreen"},{"type":"link","label":"Tracing","href":"/docs/api/class-tracing","docId":"api/class-tracing"},{"type":"link","label":"Video","href":"/docs/api/class-video","docId":"api/class-video"},{"type":"link","label":"WebSocket","href":"/docs/api/class-websocket","docId":"api/class-websocket"},{"type":"link","label":"Worker","href":"/docs/api/class-worker","docId":"api/class-worker"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Test Runner","items":[{"type":"link","label":"Fixtures","href":"/docs/api/class-fixtures","docId":"api/class-fixtures"},{"type":"link","label":"Playwright Test","href":"/docs/api/class-test","docId":"api/class-test"},{"type":"link","label":"TestConfig","href":"/docs/api/class-testconfig","docId":"api/class-testconfig"},{"type":"link","label":"TestError","href":"/docs/api/class-testerror","docId":"api/class-testerror"},{"type":"link","label":"TestInfo","href":"/docs/api/class-testinfo","docId":"api/class-testinfo"},{"type":"link","label":"TestOptions","href":"/docs/api/class-testoptions","docId":"api/class-testoptions"},{"type":"link","label":"TestProject","href":"/docs/api/class-testproject","docId":"api/class-testproject"},{"type":"link","label":"TimeoutError","href":"/docs/api/class-timeouterror","docId":"api/class-timeouterror"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Test Reporter","items":[{"type":"link","label":"Location","href":"/docs/api/class-location","docId":"api/class-location"},{"type":"link","label":"Reporter","href":"/docs/api/class-reporter","docId":"api/class-reporter"},{"type":"link","label":"Suite","href":"/docs/api/class-suite","docId":"api/class-suite"},{"type":"link","label":"TestCase","href":"/docs/api/class-testcase","docId":"api/class-testcase"},{"type":"link","label":"TestResult","href":"/docs/api/class-testresult","docId":"api/class-testresult"},{"type":"link","label":"TestStep","href":"/docs/api/class-teststep","docId":"api/class-teststep"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Experimental","items":[{"type":"link","label":"Android","href":"/docs/api/class-android","docId":"api/class-android"},{"type":"link","label":"AndroidDevice","href":"/docs/api/class-androiddevice","docId":"api/class-androiddevice"},{"type":"link","label":"AndroidInput","href":"/docs/api/class-androidinput","docId":"api/class-androidinput"},{"type":"link","label":"AndroidSocket","href":"/docs/api/class-androidsocket","docId":"api/class-androidsocket"},{"type":"link","label":"AndroidWebView","href":"/docs/api/class-androidwebview","docId":"api/class-androidwebview"},{"type":"link","label":"Electron","href":"/docs/api/class-electron","docId":"api/class-electron"},{"type":"link","label":"ElectronApplication","href":"/docs/api/class-electronapplication","docId":"api/class-electronapplication"}],"collapsed":false,"collapsible":true}],"collapsed":false,"collapsible":true}]},"docs":{"actionability":{"id":"actionability","title":"Auto-waiting","description":"Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given timeout, action fails with the TimeoutError.","sidebar":"docs"},"api/class-accessibility":{"id":"api/class-accessibility","title":"Accessibility","description":"The Accessibility class provides methods for inspecting Chromium\'s accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches."},"api/class-android":{"id":"api/class-android","title":"Android","description":"Playwright has experimental support for Android automation. This includes Chrome for Android and Android WebView.","sidebar":"api"},"api/class-androiddevice":{"id":"api/class-androiddevice","title":"AndroidDevice","description":"AndroidDevice] represents a connected device, either real hardware or emulated. Devices can be obtained using [android.devices([options]).","sidebar":"api"},"api/class-androidinput":{"id":"api/class-androidinput","title":"AndroidInput","description":"- androidInput.drag(from, to, steps)","sidebar":"api"},"api/class-androidsocket":{"id":"api/class-androidsocket","title":"AndroidSocket","description":"AndroidSocket] is a way to communicate with a process launched on the [AndroidDevice]. Use [androidDevice.open(command) to open a socket.","sidebar":"api"},"api/class-androidwebview":{"id":"api/class-androidwebview","title":"AndroidWebView","description":"AndroidWebView] represents a WebView open on the [AndroidDevice]. WebView is usually obtained using [androidDevice.webView(selector[, options]).","sidebar":"api"},"api/class-apirequest":{"id":"api/class-apirequest","title":"APIRequest","description":"Exposes API that can be used for the Web API testing. This class is used for creating APIRequestContext] instance which in turn can be used for sending web requests. An instance of this class can be obtained via [playwright.request. For more information see [APIRequestContext].","sidebar":"api"},"api/class-apirequestcontext":{"id":"api/class-apirequestcontext","title":"APIRequestContext","description":"This API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services, prepare environment or the service to your e2e test.","sidebar":"api"},"api/class-apiresponse":{"id":"api/class-apiresponse","title":"APIResponse","description":"APIResponse] class represents responses returned by [apiRequestContext.get(url[, options]) and similar methods.","sidebar":"api"},"api/class-browser":{"id":"api/class-browser","title":"Browser","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browsercontext":{"id":"api/class-browsercontext","title":"BrowserContext","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browserserver":{"id":"api/class-browserserver","title":"BrowserServer","description":"- browserServer.on(\'close\')","sidebar":"api"},"api/class-browsertype":{"id":"api/class-browsertype","title":"BrowserType","description":"BrowserType provides methods to launch a specific browser instance or connect to an existing one. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-cdpsession":{"id":"api/class-cdpsession","title":"CDPSession","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-consolemessage":{"id":"api/class-consolemessage","title":"ConsoleMessage","description":"ConsoleMessage] objects are dispatched by page via the [page.on(\'console\') event. For each console messages logged in the page there will be corresponding event in the Playwright context.","sidebar":"api"},"api/class-coverage":{"id":"api/class-coverage","title":"Coverage","description":"Coverage gathers information about parts of JavaScript and CSS that were used by the page.","sidebar":"api"},"api/class-dialog":{"id":"api/class-dialog","title":"Dialog","description":"Dialog] objects are dispatched by page via the [page.on(\'dialog\') event.","sidebar":"api"},"api/class-download":{"id":"api/class-download","title":"Download","description":"Download] objects are dispatched by page via the [page.on(\'download\') event.","sidebar":"api"},"api/class-electron":{"id":"api/class-electron","title":"Electron","description":"Playwright has experimental support for Electron automation. You can access electron namespace via:","sidebar":"api"},"api/class-electronapplication":{"id":"api/class-electronapplication","title":"ElectronApplication","description":"Electron application representation. You can use electron.launch([options]) to obtain the application instance. This instance you can control main electron process as well as work with Electron windows:","sidebar":"api"},"api/class-elementhandle":{"id":"api/class-elementhandle","title":"ElementHandle","description":"* extends: [JSHandle]","sidebar":"api"},"api/class-filechooser":{"id":"api/class-filechooser","title":"FileChooser","description":"FileChooser] objects are dispatched by the page in the [page.on(\'filechooser\') event.","sidebar":"api"},"api/class-fixtures":{"id":"api/class-fixtures","title":"Fixtures","description":"Playwright Test is based on the concept of the test fixtures. Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else.","sidebar":"api"},"api/class-frame":{"id":"api/class-frame","title":"Frame","description":"At every point of time, page exposes its current frame tree via the page.mainFrame() and frame.childFrames() methods.","sidebar":"api"},"api/class-framelocator":{"id":"api/class-framelocator","title":"FrameLocator","description":"FrameLocator represents a view to the iframe on the page. It captures the logic sufficient to retrieve the iframe and locate elements in that iframe. FrameLocator can be created with either page.frameLocator(selector) or locator.frameLocator(selector) method.","sidebar":"api"},"api/class-jshandle":{"id":"api/class-jshandle","title":"JSHandle","description":"JSHandle represents an in-page JavaScript object. JSHandles can be created with the page.evaluateHandle(pageFunction[, arg]) method.","sidebar":"api"},"api/class-keyboard":{"id":"api/class-keyboard","title":"Keyboard","description":"Keyboard provides an api for managing a virtual keyboard. The high level api is keyboard.type(text[, options]), which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.","sidebar":"api"},"api/class-location":{"id":"api/class-location","title":"Location","description":"Represents a location in the source code where [TestCase] or [Suite] is defined.","sidebar":"api"},"api/class-locator":{"id":"api/class-locator","title":"Locator","description":"Locators are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. Locator can be created with the page.locator(selector[, options]) method.","sidebar":"api"},"api/class-logger":{"id":"api/class-logger","title":"Logger","description":"Playwright generates a lot of logs and they are accessible via the pluggable logger sink.","sidebar":"api"},"api/class-mouse":{"id":"api/class-mouse","title":"Mouse","description":"The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.","sidebar":"api"},"api/class-page":{"id":"api/class-page","title":"Page","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-playwright":{"id":"api/class-playwright","title":"Playwright Library","description":"Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-reporter":{"id":"api/class-reporter","title":"Reporter","description":"Test runner notifies the reporter about various events during test execution. All methods of the reporter are optional.","sidebar":"api"},"api/class-request":{"id":"api/class-request","title":"Request","description":"Whenever the page sends a request for a network resource the following sequence of events are emitted by [Page]:","sidebar":"api"},"api/class-response":{"id":"api/class-response","title":"Response","description":"[Response] class represents responses which are received by page.","sidebar":"api"},"api/class-route":{"id":"api/class-route","title":"Route","description":"Whenever a network route is set up with page.route(url, handler[, options]) or browserContext.route(url, handler[, options]), the Route object allows to handle the route.","sidebar":"api"},"api/class-selectors":{"id":"api/class-selectors","title":"Selectors","description":"Selectors can be used to install custom selector engines. See Working with selectors for more information.","sidebar":"api"},"api/class-suite":{"id":"api/class-suite","title":"Suite","description":"Suite is a group of tests. All tests in Playwright Test form the following hierarchy:","sidebar":"api"},"api/class-test":{"id":"api/class-test","title":"Playwright Test","description":"Playwright Test provides a test function to declare tests and expect function to write assertions.","sidebar":"api"},"api/class-testcase":{"id":"api/class-testcase","title":"TestCase","description":"TestCase corresponds to every test(title, testFunction) call in a test file. When a single test(title, testFunction) is running in multiple projects or repeated multiple times, it will have multiple TestCase objects in corresponding projects\' suites.","sidebar":"api"},"api/class-testconfig":{"id":"api/class-testconfig","title":"TestConfig","description":"Playwright Test provides many options to configure how your tests are collected and executed, for example timeout or testDir. These options are described in the TestConfig] object in the [configuration file.","sidebar":"api"},"api/class-testerror":{"id":"api/class-testerror","title":"TestError","description":"Information about an error thrown during test execution.","sidebar":"api"},"api/class-testinfo":{"id":"api/class-testinfo","title":"TestInfo","description":"TestInfo contains information about currently running test. It is available to any test function, test.beforeEach(hookFunction) and test.afterEach(hookFunction) hooks and test-scoped fixtures. TestInfo provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc.","sidebar":"api"},"api/class-testoptions":{"id":"api/class-testoptions","title":"TestOptions","description":"Playwright Test provides many options to configure test environment, [Browser], [BrowserContext] and more.","sidebar":"api"},"api/class-testproject":{"id":"api/class-testproject","title":"TestProject","description":"Playwright Test supports running multiple test projects at the same time. This is useful for running tests in multiple configurations. For example, consider running tests against multiple browsers.","sidebar":"api"},"api/class-testresult":{"id":"api/class-testresult","title":"TestResult","description":"A result of a single [TestCase] run.","sidebar":"api"},"api/class-teststep":{"id":"api/class-teststep","title":"TestStep","description":"Represents a step in the [TestRun].","sidebar":"api"},"api/class-timeouterror":{"id":"api/class-timeouterror","title":"TimeoutError","description":"* extends: [Error]","sidebar":"api"},"api/class-touchscreen":{"id":"api/class-touchscreen","title":"Touchscreen","description":"The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on the touchscreen can only be used in browser contexts that have been initialized with hasTouch set to true.","sidebar":"api"},"api/class-tracing":{"id":"api/class-tracing","title":"Tracing","description":"API for collecting and saving Playwright traces. Playwright traces can be opened in Trace Viewer after Playwright script runs.","sidebar":"api"},"api/class-video":{"id":"api/class-video","title":"Video","description":"When browser context is created with the recordVideo option, each page has a video object associated with it.","sidebar":"api"},"api/class-websocket":{"id":"api/class-websocket","title":"WebSocket","description":"The [WebSocket] class represents websocket connections in the page.","sidebar":"api"},"api/class-worker":{"id":"api/class-worker","title":"Worker","description":"The Worker class represents a WebWorker. worker event is emitted on the page object to signal a worker creation. close event is emitted on the worker object when the worker is gone.","sidebar":"api"},"api/class-workerinfo":{"id":"api/class-workerinfo","title":"WorkerInfo","description":"WorkerInfo contains information about the worker that is running tests. It is available to test.beforeAll(hookFunction) and test.afterAll(hookFunction) hooks and worker-scoped fixtures."},"auth":{"id":"auth","title":"Authentication","description":"Playwright can be used to automate scenarios that require authentication.","sidebar":"docs"},"browser-contexts":{"id":"browser-contexts","title":"Browser Contexts","description":"- Browser context","sidebar":"docs"},"browsers":{"id":"browsers","title":"Browsers","description":"Each version of Playwright needs specific versions of browser binaries to operate. Depending on the language you use, Playwright will either download these browsers at package install time for you, or you will need to use Playwright CLI to install these browsers.","sidebar":"docs"},"chrome-extensions":{"id":"chrome-extensions","title":"Chrome Extensions","description":"Extensions only work in Chrome / Chromium in non-headless mode, launched with a persistent context.","sidebar":"docs"},"ci":{"id":"ci","title":"Continuous Integration","description":"Playwright tests can be executed in CI environments. We have created sample configurations for common CI providers.","sidebar":"docs"},"cli":{"id":"cli","title":"Command line tools","description":"Playwright comes with the command line tools.","sidebar":"docs"},"codegen":{"id":"codegen","title":"Test Generator","description":"Playwright comes with the ability to generate tests out of the box.","sidebar":"docs"},"debug":{"id":"debug","title":"Debugging tools","description":"Playwright scripts work with existing debugging tools, like Node.js debuggers and browser developer tools. Playwright also introduces new debugging features for browser automation.","sidebar":"docs"},"dialogs":{"id":"dialogs","title":"Dialogs","description":"Playwright can interact with the web page dialogs such as alert, confirm, prompt as well as beforeunload confirmation.","sidebar":"docs"},"docker":{"id":"docker","title":"Docker","description":"[Dockerfile.focal] can be used to run Playwright scripts in Docker environment. These image includes all the dependencies needed to run browsers in a Docker container, and also include the browsers themselves.","sidebar":"docs"},"downloads":{"id":"downloads","title":"Downloads","description":"For uploading files, see the uploading files section.","sidebar":"docs"},"emulation":{"id":"emulation","title":"Emulation","description":"Playwright allows overriding various parameters of the device where the browser is running:","sidebar":"docs"},"evaluating":{"id":"evaluating","title":"Evaluating JavaScript","description":"Playwright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don\'t intersect, they are running in different virtual machines in different processes and even potentially on different computers.","sidebar":"docs"},"events":{"id":"events","title":"Events","description":"Playwright allows listening to various types of events happening in the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events:","sidebar":"docs"},"extensibility":{"id":"extensibility","title":"Extensibility","description":"- Custom selector engines","sidebar":"docs"},"frames":{"id":"frames","title":"Frames","description":"- Frames","sidebar":"docs"},"handles":{"id":"handles","title":"Handles","description":"Playwright can create handles to the page DOM elements or any other objects inside the page. These handles live in the Playwright process, whereas the actual objects live in the browser. There are two types of handles:","sidebar":"docs"},"input":{"id":"input","title":"Input","description":"- Text input","sidebar":"docs"},"inspector":{"id":"inspector","title":"Inspector","description":"Playwright Inspector is a GUI tool that helps authoring and debugging Playwright scripts.","sidebar":"docs"},"intro":{"id":"intro","title":"Getting started","description":"Playwright can either be used as a part of the Playwright Test test runner (this guide), or as a Playwright Library.","sidebar":"docs"},"languages":{"id":"languages","title":"Supported languages","description":"The Playwright API is available in multiple languages.","sidebar":"docs"},"library":{"id":"library","title":"Library","description":"Playwright can either be used as a part of the Playwright Test, or as a Playwright Library (this guide). If you are working on an application that utilizes Playwright capabilities or you are using Playwright with another test runner, read on.","sidebar":"docs"},"locators":{"id":"locators","title":"Locators","description":"Locator]s are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. Locator can be created with the [page.locator(selector[, options]) method.","sidebar":"docs"},"mock":{"id":"mock","title":"Mock APIs","description":"Playwright provides native support for most of the browser features. However, there are some experimental APIs and APIs which are not (yet) fully supported by all browsers. Playwright usually doesn\'t provide dedicated atomation APIs in such cases. You can use mocks to test behavior of your application in such cases. This guide gives a few examples."},"navigations":{"id":"navigations","title":"Navigations","description":"Playwright can navigate to URLs and handle navigations caused by page interactions. This guide covers common scenarios to wait for page navigations and loading to complete.","sidebar":"docs"},"network":{"id":"network","title":"Network","description":"Playwright provides APIs to monitor and modify network traffic, both HTTP and HTTPS. Any requests that page does, including XHRs and fetch requests, can be tracked, modified and handled.","sidebar":"docs"},"pages":{"id":"pages","title":"Pages","description":"- Pages","sidebar":"docs"},"pom":{"id":"pom","title":"Page Object Models","description":"Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.","sidebar":"docs"},"protractor":{"id":"protractor","title":"Migrating from Protractor","description":"- Migration Principles","sidebar":"docs"},"release-notes":{"id":"release-notes","title":"Release notes","description":"- Version 1.23","sidebar":"docs"},"screenshots":{"id":"screenshots","title":"Screenshots","description":"Here is a quick way to capture a screenshot and save it into a file:","sidebar":"docs"},"selectors":{"id":"selectors","title":"Selectors","description":"Selectors are strings that are used to create Locator]s. Locators are used to perform actions on the elements by means of methods such as [locator.click([options]), locator.fill(value[, options]) and alike.","sidebar":"docs"},"selenium-grid":{"id":"selenium-grid","title":"Selenium Grid","description":"Selenium 4","sidebar":"docs"},"showcase":{"id":"showcase","title":"Community Showcase","description":"Users"},"test-advanced":{"id":"test-advanced","title":"Advanced: configuration","description":"- Configuration object","sidebar":"docs"},"test-annotations":{"id":"test-annotations","title":"Annotations","description":"- Annotations","sidebar":"docs"},"test-api-testing":{"id":"test-api-testing","title":"API testing","description":"Playwright can be used to get access to the REST API of your application.","sidebar":"docs"},"test-assertions":{"id":"test-assertions","title":"Assertions","description":"Playwright Test uses expect library for test assertions. This library provides a lot of matchers like toEqual, toContain, toMatch, toMatchSnapshot and many more:","sidebar":"docs"},"test-auth":{"id":"test-auth","title":"Authentication","description":"Tests written with Playwright execute in isolated clean-slate environments called browser contexts. Each test gets a brand new page created in a brand new context. This isolation model improves reproducibility and prevents cascading test failures.","sidebar":"docs"},"test-cli":{"id":"test-cli","title":"Command line","description":"- Examples","sidebar":"docs"},"test-components":{"id":"test-components","title":"Experimental: components","description":"Playwright Test can now test your components.","sidebar":"docs"},"test-configuration":{"id":"test-configuration","title":"Configuration","description":"Playwright Test provides options to configure the default browser, context and page fixtures. For example there are options for headless, viewport and ignoreHTTPSErrors. You can also record a video or a trace for the test or capture a screenshot at the end.","sidebar":"docs"},"test-fixtures":{"id":"test-fixtures","title":"Advanced: fixtures","description":"- Introduction to fixtures","sidebar":"docs"},"test-parallel":{"id":"test-parallel","title":"Parallelism and sharding","description":"Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time.","sidebar":"docs"},"test-parameterize":{"id":"test-parameterize","title":"Parametrize tests","description":"You can either parametrize tests on a test level or on a project level.","sidebar":"docs"},"test-pom":{"id":"test-pom","title":"Page Object Model","description":"Page Object Model is a common pattern that introduces abstractions over web app pages to simplify interactions with them in multiple tests. It is best explained by an example.","sidebar":"docs"},"test-reporters":{"id":"test-reporters","title":"Reporters","description":"- Using reporters","sidebar":"docs"},"test-retries":{"id":"test-retries","title":"Test retry","description":"- Failures","sidebar":"docs"},"test-runners":{"id":"test-runners","title":"Third party runners","description":"With a few lines of code, you can hook up Playwright to your existing JavaScript test runner.","sidebar":"docs"},"test-snapshots":{"id":"test-snapshots","title":"Visual comparisons","description":"Playwright Test includes the ability to produce and visually compare screenshots using await expect(page).toHaveScreenshot(). On first execution, Playwright test will generate reference screenshots. Subsequent runs will compare against the reference.","sidebar":"docs"},"test-timeouts":{"id":"test-timeouts","title":"Timeouts","description":"- Overview","sidebar":"docs"},"test-typescript":{"id":"test-typescript","title":"TypeScript","description":"Playwright Test supports TypeScript out of the box. You just write tests in TypeScript and Playwright Test will read them, transform to JavaScript and run. This works both with CommonJS modules and ECMAScript modules.","sidebar":"docs"},"testing-library":{"id":"testing-library","title":"Migrating from Testing Library","description":"- Migration principles","sidebar":"docs"},"trace-viewer":{"id":"trace-viewer","title":"Trace Viewer","description":"Playwright Trace Viewer is a GUI tool that helps exploring recorded Playwright traces after the script ran. Open traces locally or in your browser on trace.playwright.dev.","sidebar":"docs"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"- Browser dependencies"},"videos":{"id":"videos","title":"Videos","description":"Playwright can record videos for all pages in a browser context. Videos are saved upon context closure, so make sure to await browserContext.close().","sidebar":"docs"},"why-playwright":{"id":"why-playwright","title":"Why Playwright?","description":"Playwright enables fast, reliable and capable testing and automation across all modern browsers. This guide covers those key differentiators to help you decide on the right tool for your automated tests."}}}')}}]);