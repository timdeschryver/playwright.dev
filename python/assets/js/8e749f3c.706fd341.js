"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[8434],{3264:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"1.23","label":"1.23","banner":null,"badge":true,"className":"docs-version-1.23","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting started","href":"/python/docs/intro","docId":"intro"},{"type":"link","label":"Inspector","href":"/python/docs/inspector","docId":"inspector"},{"type":"link","label":"Trace Viewer","href":"/python/docs/trace-viewer","docId":"trace-viewer"},{"type":"link","label":"Test Generator","href":"/python/docs/codegen","docId":"codegen"},{"type":"link","label":"Debugging tools","href":"/python/docs/debug","docId":"debug"},{"type":"link","label":"Release notes","href":"/python/docs/release-notes","docId":"release-notes"},{"type":"link","label":"Pytest plugin","href":"/python/docs/test-runners","docId":"test-runners"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Auto-waiting","href":"/python/docs/actionability","docId":"actionability"},{"type":"link","label":"API testing","href":"/python/docs/api-testing","docId":"api-testing"},{"type":"link","label":"Assertions","href":"/python/docs/test-assertions","docId":"test-assertions"},{"type":"link","label":"Authentication","href":"/python/docs/auth","docId":"auth"},{"type":"link","label":"Browsers","href":"/python/docs/browsers","docId":"browsers"},{"type":"link","label":"Browser Contexts","href":"/python/docs/browser-contexts","docId":"browser-contexts"},{"type":"link","label":"Chrome Extensions","href":"/python/docs/chrome-extensions","docId":"chrome-extensions"},{"type":"link","label":"Command line tools","href":"/python/docs/cli","docId":"cli"},{"type":"link","label":"Dialogs","href":"/python/docs/dialogs","docId":"dialogs"},{"type":"link","label":"Downloads","href":"/python/docs/downloads","docId":"downloads"},{"type":"link","label":"Emulation","href":"/python/docs/emulation","docId":"emulation"},{"type":"link","label":"Evaluating JavaScript","href":"/python/docs/evaluating","docId":"evaluating"},{"type":"link","label":"Events","href":"/python/docs/events","docId":"events"},{"type":"link","label":"Extensibility","href":"/python/docs/extensibility","docId":"extensibility"},{"type":"link","label":"Frames","href":"/python/docs/frames","docId":"frames"},{"type":"link","label":"Handles","href":"/python/docs/handles","docId":"handles"},{"type":"link","label":"Input","href":"/python/docs/input","docId":"input"},{"type":"link","label":"Locators","href":"/python/docs/locators","docId":"locators"},{"type":"link","label":"Navigations","href":"/python/docs/navigations","docId":"navigations"},{"type":"link","label":"Network","href":"/python/docs/network","docId":"network"},{"type":"link","label":"Pages","href":"/python/docs/pages","docId":"pages"},{"type":"link","label":"Page Object Models","href":"/python/docs/pom","docId":"pom"},{"type":"link","label":"Screenshots","href":"/python/docs/screenshots","docId":"screenshots"},{"type":"link","label":"Selectors","href":"/python/docs/selectors","docId":"selectors"},{"type":"link","label":"Videos","href":"/python/docs/videos","docId":"videos"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Docker","href":"/python/docs/docker","docId":"docker"},{"type":"link","label":"Continuous Integration","href":"/python/docs/ci","docId":"ci"},{"type":"link","label":"Selenium Grid","href":"/python/docs/selenium-grid","docId":"selenium-grid"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Supported languages","href":"/python/docs/languages","docId":"languages"}],"api":[{"type":"category","label":"API reference","items":[{"type":"link","label":"Playwright","href":"/python/docs/api/class-playwright","docId":"api/class-playwright"},{"type":"category","label":"Classes","items":[{"type":"link","label":"APIRequest","href":"/python/docs/api/class-apirequest","docId":"api/class-apirequest"},{"type":"link","label":"APIRequestContext","href":"/python/docs/api/class-apirequestcontext","docId":"api/class-apirequestcontext"},{"type":"link","label":"APIResponse","href":"/python/docs/api/class-apiresponse","docId":"api/class-apiresponse"},{"type":"link","label":"Accessibility","href":"/python/docs/api/class-accessibility","docId":"api/class-accessibility"},{"type":"link","label":"Browser","href":"/python/docs/api/class-browser","docId":"api/class-browser"},{"type":"link","label":"BrowserContext","href":"/python/docs/api/class-browsercontext","docId":"api/class-browsercontext"},{"type":"link","label":"BrowserType","href":"/python/docs/api/class-browsertype","docId":"api/class-browsertype"},{"type":"link","label":"CDPSession","href":"/python/docs/api/class-cdpsession","docId":"api/class-cdpsession"},{"type":"link","label":"ConsoleMessage","href":"/python/docs/api/class-consolemessage","docId":"api/class-consolemessage"},{"type":"link","label":"Dialog","href":"/python/docs/api/class-dialog","docId":"api/class-dialog"},{"type":"link","label":"Download","href":"/python/docs/api/class-download","docId":"api/class-download"},{"type":"link","label":"ElementHandle","href":"/python/docs/api/class-elementhandle","docId":"api/class-elementhandle"},{"type":"link","label":"Error","href":"/python/docs/api/class-error","docId":"api/class-error"},{"type":"link","label":"FileChooser","href":"/python/docs/api/class-filechooser","docId":"api/class-filechooser"},{"type":"link","label":"Frame","href":"/python/docs/api/class-frame","docId":"api/class-frame"},{"type":"link","label":"FrameLocator","href":"/python/docs/api/class-framelocator","docId":"api/class-framelocator"},{"type":"link","label":"JSHandle","href":"/python/docs/api/class-jshandle","docId":"api/class-jshandle"},{"type":"link","label":"Keyboard","href":"/python/docs/api/class-keyboard","docId":"api/class-keyboard"},{"type":"link","label":"Locator","href":"/python/docs/api/class-locator","docId":"api/class-locator"},{"type":"link","label":"Mouse","href":"/python/docs/api/class-mouse","docId":"api/class-mouse"},{"type":"link","label":"Page","href":"/python/docs/api/class-page","docId":"api/class-page"},{"type":"link","label":"Request","href":"/python/docs/api/class-request","docId":"api/class-request"},{"type":"link","label":"Response","href":"/python/docs/api/class-response","docId":"api/class-response"},{"type":"link","label":"Route","href":"/python/docs/api/class-route","docId":"api/class-route"},{"type":"link","label":"Selectors","href":"/python/docs/api/class-selectors","docId":"api/class-selectors"},{"type":"link","label":"TimeoutError","href":"/python/docs/api/class-timeouterror","docId":"api/class-timeouterror"},{"type":"link","label":"Touchscreen","href":"/python/docs/api/class-touchscreen","docId":"api/class-touchscreen"},{"type":"link","label":"Tracing","href":"/python/docs/api/class-tracing","docId":"api/class-tracing"},{"type":"link","label":"Video","href":"/python/docs/api/class-video","docId":"api/class-video"},{"type":"link","label":"WebSocket","href":"/python/docs/api/class-websocket","docId":"api/class-websocket"},{"type":"link","label":"Worker","href":"/python/docs/api/class-worker","docId":"api/class-worker"}],"collapsed":false,"collapsible":true}],"collapsed":false,"collapsible":true}]},"docs":{"actionability":{"id":"actionability","title":"Auto-waiting","description":"Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given timeout, action fails with the TimeoutError.","sidebar":"docs"},"api-testing":{"id":"api-testing","title":"API testing","description":"Playwright can be used to get access to the REST API of your application.","sidebar":"docs"},"api/class-accessibility":{"id":"api/class-accessibility","title":"Accessibility","description":"The Accessibility class provides methods for inspecting Chromium\'s accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches.","sidebar":"api"},"api/class-apirequest":{"id":"api/class-apirequest","title":"APIRequest","description":"Exposes API that can be used for the Web API testing. This class is used for creating APIRequestContext] instance which in turn can be used for sending web requests. An instance of this class can be obtained via [playwright.request. For more information see [APIRequestContext].","sidebar":"api"},"api/class-apirequestcontext":{"id":"api/class-apirequestcontext","title":"APIRequestContext","description":"This API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services, prepare environment or the service to your e2e test.","sidebar":"api"},"api/class-apiresponse":{"id":"api/class-apiresponse","title":"APIResponse","description":"APIResponse] class represents responses returned by [apirequestcontext.get(url, kwargs) and similar methods.","sidebar":"api"},"api/class-browser":{"id":"api/class-browser","title":"Browser","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browsercontext":{"id":"api/class-browsercontext","title":"BrowserContext","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browsertype":{"id":"api/class-browsertype","title":"BrowserType","description":"BrowserType provides methods to launch a specific browser instance or connect to an existing one. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-cdpsession":{"id":"api/class-cdpsession","title":"CDPSession","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-consolemessage":{"id":"api/class-consolemessage","title":"ConsoleMessage","description":"ConsoleMessage] objects are dispatched by page via the [page.on(\\"console\\") event. For each console messages logged in the page there will be corresponding event in the Playwright context.","sidebar":"api"},"api/class-dialog":{"id":"api/class-dialog","title":"Dialog","description":"Dialog] objects are dispatched by page via the [page.on(\\"dialog\\") event.","sidebar":"api"},"api/class-download":{"id":"api/class-download","title":"Download","description":"Download] objects are dispatched by page via the [page.on(\\"download\\") event.","sidebar":"api"},"api/class-elementhandle":{"id":"api/class-elementhandle","title":"ElementHandle","description":"* extends: [JSHandle]","sidebar":"api"},"api/class-error":{"id":"api/class-error","title":"Error","description":"* extends: [Exception]","sidebar":"api"},"api/class-filechooser":{"id":"api/class-filechooser","title":"FileChooser","description":"FileChooser] objects are dispatched by the page in the [page.on(\\"filechooser\\") event.","sidebar":"api"},"api/class-frame":{"id":"api/class-frame","title":"Frame","description":"At every point of time, page exposes its current frame tree via the page.mainframe and frame.childframes methods.","sidebar":"api"},"api/class-framelocator":{"id":"api/class-framelocator","title":"FrameLocator","description":"FrameLocator represents a view to the iframe on the page. It captures the logic sufficient to retrieve the iframe and locate elements in that iframe. FrameLocator can be created with either page.framelocator(selector) or locator.framelocator(selector) method.","sidebar":"api"},"api/class-jshandle":{"id":"api/class-jshandle","title":"JSHandle","description":"JSHandle represents an in-page JavaScript object. JSHandles can be created with the page.evaluate_handle(expression, kwargs) method.","sidebar":"api"},"api/class-keyboard":{"id":"api/class-keyboard","title":"Keyboard","description":"Keyboard provides an api for managing a virtual keyboard. The high level api is keyboard.type(text, kwargs), which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.","sidebar":"api"},"api/class-locator":{"id":"api/class-locator","title":"Locator","description":"Locators are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. Locator can be created with the page.locator(selector, kwargs) method.","sidebar":"api"},"api/class-mouse":{"id":"api/class-mouse","title":"Mouse","description":"The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.","sidebar":"api"},"api/class-page":{"id":"api/class-page","title":"Page","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-playwright":{"id":"api/class-playwright","title":"Playwright","description":"Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-request":{"id":"api/class-request","title":"Request","description":"Whenever the page sends a request for a network resource the following sequence of events are emitted by [Page]:","sidebar":"api"},"api/class-response":{"id":"api/class-response","title":"Response","description":"[Response] class represents responses which are received by page.","sidebar":"api"},"api/class-route":{"id":"api/class-route","title":"Route","description":"Whenever a network route is set up with page.route(url, handler, kwargs) or browser_context.route(url, handler, kwargs), the Route object allows to handle the route.","sidebar":"api"},"api/class-selectors":{"id":"api/class-selectors","title":"Selectors","description":"Selectors can be used to install custom selector engines. See Working with selectors for more information.","sidebar":"api"},"api/class-timeouterror":{"id":"api/class-timeouterror","title":"TimeoutError","description":"* extends: [Error]","sidebar":"api"},"api/class-touchscreen":{"id":"api/class-touchscreen","title":"Touchscreen","description":"The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on the touchscreen can only be used in browser contexts that have been initialized with hasTouch set to true.","sidebar":"api"},"api/class-tracing":{"id":"api/class-tracing","title":"Tracing","description":"API for collecting and saving Playwright traces. Playwright traces can be opened in Trace Viewer after Playwright script runs.","sidebar":"api"},"api/class-video":{"id":"api/class-video","title":"Video","description":"When browser context is created with the recordVideo option, each page has a video object associated with it.","sidebar":"api"},"api/class-websocket":{"id":"api/class-websocket","title":"WebSocket","description":"The [WebSocket] class represents websocket connections in the page.","sidebar":"api"},"api/class-worker":{"id":"api/class-worker","title":"Worker","description":"The Worker class represents a WebWorker. worker event is emitted on the page object to signal a worker creation. close event is emitted on the worker object when the worker is gone.","sidebar":"api"},"auth":{"id":"auth","title":"Authentication","description":"Playwright can be used to automate scenarios that require authentication.","sidebar":"docs"},"browser-contexts":{"id":"browser-contexts","title":"Browser Contexts","description":"- Browser context","sidebar":"docs"},"browsers":{"id":"browsers","title":"Browsers","description":"Each version of Playwright needs specific versions of browser binaries to operate. Depending on the language you use, Playwright will either download these browsers at package install time for you, or you will need to use Playwright CLI to install these browsers.","sidebar":"docs"},"chrome-extensions":{"id":"chrome-extensions","title":"Chrome Extensions","description":"Extensions only work in Chrome / Chromium in non-headless mode, launched with a persistent context.","sidebar":"docs"},"ci":{"id":"ci","title":"Continuous Integration","description":"Playwright tests can be executed in CI environments. We have created sample configurations for common CI providers.","sidebar":"docs"},"cli":{"id":"cli","title":"Command line tools","description":"Playwright comes with the command line tools.","sidebar":"docs"},"codegen":{"id":"codegen","title":"Test Generator","description":"Playwright comes with the ability to generate tests out of the box.","sidebar":"docs"},"debug":{"id":"debug","title":"Debugging tools","description":"Playwright scripts work with existing debugging tools, like Node.js debuggers and browser developer tools. Playwright also introduces new debugging features for browser automation.","sidebar":"docs"},"dialogs":{"id":"dialogs","title":"Dialogs","description":"Playwright can interact with the web page dialogs such as alert, confirm, prompt as well as beforeunload confirmation.","sidebar":"docs"},"docker":{"id":"docker","title":"Docker","description":"[Dockerfile.focal] can be used to run Playwright scripts in Docker environment. These image includes all the dependencies needed to run browsers in a Docker container, and also include the browsers themselves.","sidebar":"docs"},"downloads":{"id":"downloads","title":"Downloads","description":"For uploading files, see the uploading files section.","sidebar":"docs"},"emulation":{"id":"emulation","title":"Emulation","description":"Playwright allows overriding various parameters of the device where the browser is running:","sidebar":"docs"},"evaluating":{"id":"evaluating","title":"Evaluating JavaScript","description":"Playwright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don\'t intersect, they are running in different virtual machines in different processes and even potentially on different computers.","sidebar":"docs"},"events":{"id":"events","title":"Events","description":"Playwright allows listening to various types of events happening in the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events:","sidebar":"docs"},"extensibility":{"id":"extensibility","title":"Extensibility","description":"- Custom selector engines","sidebar":"docs"},"frames":{"id":"frames","title":"Frames","description":"- Frames","sidebar":"docs"},"handles":{"id":"handles","title":"Handles","description":"Playwright can create handles to the page DOM elements or any other objects inside the page. These handles live in the Playwright process, whereas the actual objects live in the browser. There are two types of handles:","sidebar":"docs"},"input":{"id":"input","title":"Input","description":"- Text input","sidebar":"docs"},"inspector":{"id":"inspector","title":"Inspector","description":"Playwright Inspector is a GUI tool that helps authoring and debugging Playwright scripts.","sidebar":"docs"},"intro":{"id":"intro","title":"Getting started","description":"- Installation","sidebar":"docs"},"languages":{"id":"languages","title":"Supported languages","description":"The Playwright API is available in multiple languages.","sidebar":"docs"},"locators":{"id":"locators","title":"Locators","description":"Locator]s are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. Locator can be created with the [page.locator(selector, kwargs) method.","sidebar":"docs"},"navigations":{"id":"navigations","title":"Navigations","description":"Playwright can navigate to URLs and handle navigations caused by page interactions. This guide covers common scenarios to wait for page navigations and loading to complete.","sidebar":"docs"},"network":{"id":"network","title":"Network","description":"Playwright provides APIs to monitor and modify network traffic, both HTTP and HTTPS. Any requests that page does, including XHRs and fetch requests, can be tracked, modified and handled.","sidebar":"docs"},"pages":{"id":"pages","title":"Pages","description":"- Pages","sidebar":"docs"},"pom":{"id":"pom","title":"Page Object Models","description":"Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.","sidebar":"docs"},"release-notes":{"id":"release-notes","title":"Release notes","description":"- Version 1.23","sidebar":"docs"},"screenshots":{"id":"screenshots","title":"Screenshots","description":"Here is a quick way to capture a screenshot and save it into a file:","sidebar":"docs"},"selectors":{"id":"selectors","title":"Selectors","description":"Selectors are strings that are used to create Locator]s. Locators are used to perform actions on the elements by means of methods such as [locator.click(kwargs), locator.fill(value, kwargs) and alike.","sidebar":"docs"},"selenium-grid":{"id":"selenium-grid","title":"Selenium Grid","description":"Selenium 4","sidebar":"docs"},"showcase":{"id":"showcase","title":"Community Showcase","description":"Users"},"test-assertions":{"id":"test-assertions","title":"Assertions","description":"Playwright gives you Web-First Assertions with convenience methods for creating assertions that will wait and retry until the expected condition is met.","sidebar":"docs"},"test-runners":{"id":"test-runners","title":"Pytest plugin","description":"Write end-to-end tests for your web apps with Pytest.","sidebar":"docs"},"trace-viewer":{"id":"trace-viewer","title":"Trace Viewer","description":"Playwright Trace Viewer is a GUI tool that helps exploring recorded Playwright traces after the script ran. Open traces locally or in your browser on trace.playwright.dev.","sidebar":"docs"},"videos":{"id":"videos","title":"Videos","description":"Playwright can record videos for all pages in a browser context. Videos are saved upon context closure, so make sure to await browser_context.close().","sidebar":"docs"},"why-playwright":{"id":"why-playwright","title":"Why Playwright?","description":"Playwright enables fast, reliable and capable testing and automation across all modern browsers. This guide covers those key differentiators to help you decide on the right tool for your automated tests."}}}')}}]);